# -*- coding: utf-8 -*-
"""yahooData.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ffJE5Q3fLcwvwKeEfx6bOAlm-o3IUyP3
"""

import yfinance as yahooFinance
import pandas as pd
import matplotlib.pyplot as plt

getAmazoninfo = yahooFinance.Ticker("AMZN")
getAppleinfo = yahooFinance.Ticker("AAPL")
getGoogleinfo = yahooFinance.Ticker("GOOG")
getMicrosoftinfo = yahooFinance.Ticker("MSFT")

"""getting historic data for particular period of time of AMAZON"""

historic_data_amazon = getAmazoninfo.history(period="1y")
pd.set_option('display.max_rows', None) #pd.set_option("display.max_rows") is used to display all the rows of the dataframe
apple=getAppleinfo.history(period='1y')
pd.set_option("display.max_rows",None)
Google=getGoogleinfo.history(period='1y')
pd.set_option("display.max_rows",None)
Microsoft=getMicrosoftinfo.history(period='1y')
pd.set_option("display.max_rows",None)

#data preprocessing:
def preprocess(data):
    null_value = data.isnull().sum()
    for col in data.columns:
        if null_value[col] > 0:
            data[col].fillna(0,inplace=True)

    dup_count = data.duplicated().sum()
    print("null_value:", null_value)
    print("dup_count =", dup_count)

preprocess(historic_data_amazon)

preprocess(apple)

preprocess(Google)

preprocess(Microsoft)

"""historic data for apple

Data do not have any duplicate or missing values that is data is clean now .

1.What was the change in stock price over time?
"""

historic_data_amazon['percentage']=abs(historic_data_amazon['Close']/historic_data_amazon['Close'].shift(1))-1
apple['percentage']=abs(apple['Close']/apple['Close'].shift(1))-1
Google['percentage']=abs(Google['Close']/Google['Close'].shift(1))-1
Microsoft['percentage']=abs(Microsoft['Close']/Microsoft['Close'].shift(1))-1

historic_data_amazon['percentage'].plot(label='AMAZON',figsize=(23,9),xlabel='year',ylabel='Price')
apple['percentage'].plot(label='APPLE')
Google['percentage'].plot(label='GOOGLE')
Microsoft['percentage'].plot(label='MICROSOFT')
plt.legend()

"""2.Visualize the change in a stock’s volume being traded, over time?

"""

historic_data_amazon['Volume'].plot(label='AMAZON',figsize=(23,9),xlabel='year',ylabel='Price',title='Change in Volume over time')
apple['Volume'].plot(label='APPLE')
Google['Volume'].plot(label='GOOGLE')
Microsoft['Volume'].plot(label='MICROSOFT')
plt.grid(True)
plt.legend()

"""3. What was the moving average of various stocks?"""

def calculate_moving_avg(data):
  window_size = 20# lets calculate the moving avg for 50 days
  data['moving_avg']=data['Volume'].rolling(window=window_size).mean()
  return data['moving_avg']

historic_data_amazon=historic_data_amazon.dropna()

calculate_moving_avg(historic_data_amazon)
calculate_moving_avg(Google)
calculate_moving_avg(Microsoft)
calculate_moving_avg(apple)

apple=apple.dropna()
Google=Google.dropna()
Microsoft=Microsoft.dropna()

def plot_mv(data):
  data['Volume'].plot(label="volume for stock")
  data['moving_avg'].plot(label="Moving avg for 50 days")
  plt.ylabel("Volume range")
  plt.legend()
  plt.show()

plot_mv(Microsoft)

plot_mv(historic_data_amazon)

plot_mv(Google)

plot_mv(apple)

"""4.What was the daily return average of a stock

"""

def avg_return(data):
  data['Daily_Return']=data['Close'].pct_change()
  average_daily_return = data['Daily_Return'].mean()
  return average_daily_return*100

avg_return(historic_data_amazon)

avg_return(Google)

avg_return(apple)

avg_return(Microsoft)

"""5.Adda new column ‘Trend’ whose values are based on the 'Daily Return'.

"""

historic_data_amazon['Trend']=historic_data_amazon['Daily_Return']
apple['Trend']=apple['Daily_Return']
Google['Trend']=Google['Daily_Return']
Microsoft['Trend']=Microsoft['Daily_Return']

def trend_chart(data):
    neg =[]
    pos=[]
    threshold = -0.01
    for i in data['Trend']:
      if i < threshold :
        neg.append(i)
      else:
        pos.append(i)
    a= len(neg)
    b=len(pos)
    sizes=[a,b]
    fig, ax = plt.subplots()
    ax.pie(sizes, labels=(["Negative trend",'Positive trend']), autopct='%1.1f%%', startangle=90, colors=['red', 'green'])
    ax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.

    # Adding a title
    plt.title('Distribution of Trends for ')

"""Trend Chart for Apple"""

trend_chart(apple)

"""Trend Chart for Amazon"""

trend_chart(historic_data_amazon)

"""Trend Chart for Microsoft

"""

trend_chart(Microsoft)

"""Trend Chart for Google"""

trend_chart(Google)

"""6.What was the correlation between the daily returns of different stocks"""

#we need to make a common dataframe for both the stocks daily return
df1 = pd.DataFrame({"Amazon" : historic_data_amazon['Trend'],
                    "Apple" : apple["Trend"],
                   "Google": Google["Trend"],
                   "Microsoft": Microsoft["Trend"]})

df1 = df1.dropna()

correlation_matrix = df1.corr()
correlation_matrix

"""The above matrix shows that the trend between stocks like Amazon and Microft , Apple and microsoft, Google and amazon are common mostly or correlated."""